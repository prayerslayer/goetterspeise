<header>
	{{>nav-read}}	
</header>

<div class="col-1-1">
<article class="post">
	<h1>Developing a responsive, Retina-friendly site (Part 1)</h1>

	<p>In my last post, <a href="http://paulstamatiou.com/responsive-retina-blog-design" title="Designing a responsive, Retina-friendly site">Designing a responsive, Retina-friendly site</a>, I covered my design process and thoughts behind redesigning this site. I did not cover any aspects of actual development or any Jekyll specifics. This post will mainly cover coding up <strong>responsive design</strong> and the third and final post will cover retina media queries, <strong>responsive images</strong> and more.</p> <h4>Jekyll + Rack on Heroku</h4> <p>I last redesigned my blog in 2010 when I <a href="http://paulstamatiou.com/how-to-wordpress-to-jekyll" title="How To: WordPress to Jekyll">migrated from WordPress to Jekyll</a>. I eventually forked <a href="https://github.com/mojombo/jekyll">jekyll</a> to support a separate photos post type outside of the main site.posts. I then wrapped it in Rack::Rewrite with Rack::TryStatic so I could host it on Heroku and 301 some old permalinks. I won't cover the details of that too much, but I recall reading <a href="http://mwmanning.com/2011/12/04/Jekyll-on-Heroku-Part-2.html" title="Jekyll on Heroku Part 2">this post by Matt Manning</a> when I made the switch.</p> <p>Most of the configuration is in the <code class="inline">config.ru</code> file. I loathe URLs that end in .html so my jekyll fork is based on <a href="https://github.com/henrik/jekyll/commit/1d42b39f70415fc69f80e6736649bc570ff4e2cb">this gist</a> for Apache-inspired "multiviews" support &mdash; basically it writes links without the file extension and then I get Rack to do the same.</p> <div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span> <span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span> <span class="nb">require</span> <span class="s1">&#39;rack/request&#39;</span> <span class="nb">require</span> <span class="s1">&#39;rack/rewrite&#39;</span> <span class="nb">require</span> <span class="s1">&#39;rack/contrib/try_static&#39;</span> <span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Deflater</span> <span class="c1"># also, look into Rack::ETag</span> <span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Rewrite</span> <span class="k">do</span> <span class="c1"># rewriting old WordPress permalinks I had</span> <span class="c1"># Do not show .html file extensions</span> <span class="c1"># I largely gave up /year/month/day style permalinks for the ridiculous </span> <span class="c1"># extra page generation time in jekyll (ie if /2013 loaded its own archives page)</span> <span class="n">r301</span> <span class="sr">%r{/[0-9]{4}/[0-9]{2}/[0-9]{2}/([a-z0-9\-/]+)}</span><span class="p">,</span> <span class="s1">&#39;/$1&#39;</span> <span class="n">r301</span> <span class="sr">%r{/categories/(.*)}</span><span class="p">,</span> <span class="s1">&#39;/posts&#39;</span> <span class="n">r301</span> <span class="sr">%r{/tags/(.*)}</span><span class="p">,</span> <span class="s1">&#39;/posts&#39;</span> <span class="n">r301</span> <span class="sr">%r{/people/(.*)}</span><span class="p">,</span> <span class="s1">&#39;/posts&#39;</span> <span class="n">r301</span> <span class="sr">%r{/([0-9]{4})/([0-9]{2})}</span><span class="p">,</span> <span class="s1">&#39;/posts&#39;</span> <span class="n">r301</span> <span class="sr">%r{/([0-9]{4})}</span><span class="p">,</span> <span class="s1">&#39;/posts&#39;</span> <span class="n">r301</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span> <span class="n">r301</span> <span class="s1">&#39;/index&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span> <span class="n">r301</span> <span class="s1">&#39;/archives&#39;</span><span class="p">,</span> <span class="s1">&#39;/posts&#39;</span> <span class="n">r301</span> <span class="sr">%r{/(.*).html$}</span><span class="p">,</span> <span class="s1">&#39;/$1&#39;</span> <span class="c1"># I set USER=Stammy in .env -- you use foreman right?? -- to ignore these in dev locally</span> <span class="k">unless</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;USER&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;Stammy&quot;</span> <span class="c1"># remove all trailing slashes.. probably a better way to do this</span> <span class="n">r301</span> <span class="sr">%r{/(.*)/}</span><span class="p">,</span> <span class="s1">&#39;/$1&#39;</span> <span class="c1"># i have a few domains that point here like pstam.com</span> <span class="c1"># rewrite them to only use paulstamatiou.com</span> <span class="n">r301</span> <span class="sr">%r{.*}</span><span class="p">,</span> <span class="s1">&#39;http://paulstamatiou.com$&amp;&#39;</span><span class="p">,</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span><span class="o">|</span><span class="n">rack_env</span><span class="o">|</span> <span class="n">rack_env</span><span class="o">[</span><span class="s1">&#39;SERVER_NAME&#39;</span><span class="o">]</span> <span class="o">!=</span> <span class="s1">&#39;paulstamatiou.com&#39;</span> <span class="p">}</span> <span class="k">end</span> <span class="k">end</span> <span class="c1"># serve up some static goodness</span> <span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:TryStatic</span><span class="p">,</span> <span class="ss">:root</span> <span class="o">=&gt;</span> <span class="s2">&quot;_site&quot;</span><span class="p">,</span> <span class="ss">:urls</span> <span class="o">=&gt;</span> <span class="sx">%w[/]</span><span class="p">,</span> <span class="ss">:try</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;.html&#39;</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="s1">&#39;/index.html&#39;</span><span class="o">]</span> <span class="c1"># Serve the 404 error page</span> <span class="n">error_file</span> <span class="o">=</span> <span class="s1">&#39;_site/404.html&#39;</span> <span class="n">run</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="o">[</span><span class="mi">404</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Last-Modified&#39;</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">mtime</span><span class="p">(</span><span class="n">error_file</span><span class="p">)</span><span class="o">.</span><span class="n">httpdate</span><span class="p">,</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span> <span class="p">,</span> <span class="s1">&#39;Content-Length&#39;</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">error_file</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="p">},</span><span class="o">[</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">error_file</span><span class="p">)</span><span class="o">]</span> <span class="o">]</span> <span class="p">}</span> </code></pre> </div> <p>To ensure deflater is properly compressing markup run this and you should see <code class="inline">Content-Encoding: gzip</code> returned:</p> <div class="highlight"><pre><code class="bash"><span class="c"># change 5000 to whatever port you run locally</span> curl -i -H <span class="s2">&quot;Accept-Encoding: gzip,deflate&quot;</span> http://localhost:5000 2&gt;&amp;1 | grep <span class="s2">&quot;gzip&quot;</span> </code></pre> </div> <h4 id="grunt"><code class="inline">grunt</code> watches over</h4> <p>When I started developing the new site I wanted to automate some of my workflow. Things like Coffeescript, JavaScript and Sass compilation to production-ready assets whenever any of the source files changed.</p> <p>I took a look at the <a href="http://gruntjs.com/" title="Grunt is a task-based command line build tool for JavaScript projects">grunt build tool</a> to help me with these issues. If you use jekyll, you probably have a Rakefile<sup><a href="#footnote-1" id="r1">1</a></sup> where you have specified several tasks to aid in create new posts and so on. In layman's terms, grunt is very similar but based on node.</p> <p>Installation is an npm command away: <code class="inline">npm install -g grunt</code></p> <p>I setup the main <code class="inline">grunt.js</code> file in my project directory root to do a few things:</p> <ul> <li>Monitor all files in my <code class="inline">style</code> directory and compile <code class="inline">screen.scss</code> if any of them changed, like imported scss files.</li> <li>Watch and compile the Coffeescript file <code class="inline">app.coffee</code> into JS and put it in the <code class="inline">js</code> directory.</li> <li>Watch all specified js files in the <code class="inline">_jslibs</code> directory and minify them along with the compiled coffee file, app.js, into a single file.</li> <li>Gzip then upload assets to Cloudfront as necessary.</li> </ul> <p>I installed <code class="inline">grunt-coffee</code> and <code class="inline">grunt-compass</code> plugins to be able to work with Coffeescript and Compass for Sass. And then <code class="inline">grunt-s3</code> to upload some assets to my S3 Cloudfront bucket. Finally, I installed <code class="inline">grunt-smushit</code> to be able to optimize images from the command line.
	<blockquote>
		<p>don't do this:</p>
		<code>
			if ( integer == true ) {};
		</code>
		<p>I mean it!</p>
	</blockquote>
</article>
</div>

<footer>
	{{>nav-read}}	
</footer>